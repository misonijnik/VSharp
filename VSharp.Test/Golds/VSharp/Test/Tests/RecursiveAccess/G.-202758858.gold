METHOD: System.Int32 VSharp.Test.Tests.RecursiveAccess.G(System.Int32)
RESULT: UNION[
	| !hasKey#2 ~> 10 + μ[F]_1
	| hasKey#2 ~> 10 + VSharp.Test.Tests.Container.X + μ[F]_1]
HEAP:
{ heap = { heap = h0, statics = s1 } ⚪ recapp(F), statics = write({ heap = h0, statics = s1 } ⚪ recapp(F), s2) } where
---------- h0 = ----------
1.3 ==> VSharp.Test.Tests.Bag CLASS [
	| VSharp::Test::Tests::Bag::X ~> UNION[
		| !hasKey#2 ~> 0
		| hasKey#2 ~> VSharp.Test.Tests.Container.X]]
---------- s1 = ----------
System.Object ==> CLASS []
VSharp.Test.Tests.Bag ==> CLASS []
VSharp.Test.Tests.Container ==> CLASS [
	| X ~> UNION[
		| !hasKey#2 ~> 1
		| hasKey#2 ~> 1 + VSharp.Test.Tests.Container.X]]
VSharp.Test.Tests.RecursiveAccess ==> CLASS []
---------- s2 = ----------
VSharp.Test.Tests.Container ==> CLASS [
	| X ~> μ[F]_1]
